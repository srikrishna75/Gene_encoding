import os 
os.chdir("C:\\Users\\KRISH8\\Desktop\\TGB- Assignment")

import pandas as pd 
import numpy as np

df = pd.read_csv('problem2.csv',header=None)  # importing the data in to python

df  # reading the data that is imported

df.shape # checking shape of data

## I am going to explain each line of code, what it is doing

#### For my logic the values should be in string format. 
#### the below cell of code will convert numeric values into string

# first of all i dont have a column names. so, python gave default numeric names.
# we will start converting column names into strings and at end of the code i will change column 
# data type back to numeric, which help in future coding easy.

df_col_names = df.columns         # grabing column names and assigning to a variable
type_string_names =[]                # passing a empty list, it will collect column names after converting        

for i in df_col_names:       # starting for loop for column data conversion
    db = str(i)       # each name is changed to string here.
    type_string_names.append(db)    # after changing data type, name is appended to above empty list 'string_names'
    
df.columns = type_string_names            # this line will overwrite old column names to new converted names.

for i in type_string_names:                     # started for loop for changing value data type to string
    df[i] = df[i].astype(str)   # on right side of = data type is changed and left hand it is overwriten in orginal dataframe

lis_3 =[]         # as i told you above i am going to change column name present string to numeric
for i in type_string_names:         # this code follows same as first for loop code in this cell.
    db = int(i)
    lis_3.append(db)
    
df.columns = lis_3




rs_range = np.arange(1,31)
gh = 0                       # this cell code changes dataframe to list
B =[]                        # as we want to decode data on row wise and not column wise, this is 
                             # the reason i am changing dataframe to list format. 
for i in rs_range:             
    rs = df[gh:i]            # changed format is assigned to variable "B". because B is good for 
    gh+=1                          # eyes when there is dense pack of code.
    B.append(rs.values) 
	
	
l1 = [[3,4,5],[6,7,8],[9,10,11],[12,13,14],[15,16,17],[18,19,20],[21,22,23],[24,25,26],
      [27,28,29],[30,31,32],[33,34,35],[36,37,38],[39,40,41],[42,43,44],[45,46,47],[48,49,50],
      [51,52,53],[54,55,56],[57,58,59],[60,61,62],[63,64,65],[66,67,68],[69,70,71],[72,73,74],
      [75,76,77],[78,79,80],[81,82,83],[84,85,86],[87,88,89],[90,91,92]] 

# these  are the column numbers segregated in to three each values. 


decoded_data =[]                      # this cell is heart of the code 
r1 = np.arange(0,30)        # first for loop takes values row wise
r2 = np.arange(0,30)        # second for loop takes values column wise 
for i in r1:                # form variable 'l1' values are taken into j,k,l
    for q in r2:                                               
        j,k,l=l1[q]         # indexing of our list 'B' - maindata. 
        if ( B[i][0][j] + B[i][0][k] + B[i][0][l] == '100'):
            decoded_data.append(( B[i][0][1] + B[i][0][1] ))
        elif ( B[i][0][j] + B[i][0][k] + B[i][0][l] == '010'): 
            decoded_data.append(( B[i][0][1] + B[i][0][2] ))
        else:
            decoded_data.append(( B[i][0][2] + B[i][0][2] ))  # the decoded values are assigned to variable 'decoded data'                 
			

l2=[]
i = 0
j = 29                        # after decoding the data slicing is done 30*30
for q in np.arange(0,31):
    l2.append(decoded_data[i:j])
    i=j+1
    j=j+30
     
	 
final_col_names = ['SNP']
a_1 = ['S']
a_2 = np.arange(1,30)
for i in a_1:                            # this code creats column names for our final data.
    for j in a_2:
        y=('{}{}'.format(i,j))          
        final_col_names.append(y)
		
		
final_decoded_data =pd.DataFrame(l2) # converting our data to dataframe 

snp = list(df[0].values) # getting variable 'srIDs' from orginal dataframe
snp.append('none')

final_decoded_data['SNP'] = snp        # adding 'srIDs' to decoded dataframe

cols = final_decoded_data.columns.tolist()
cols = cols[-1:]+cols[:-1]                 # after addition of 'srIDs', it added at last column      
final_decoded_data = final_decoded_data[cols] # this code will shift 'SNP' column from last to first

final_decoded_data.columns = final_col_names # giving column names to our dataframe

final_decoded_data

# saving data to excel
final_decoded_data.to_excel('Problem_2_decoded.xlsx')